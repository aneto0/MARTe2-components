#############################################################
#
# Copyright 2015 EFDA | European Joint Undertaking for ITER
# and the Development of Fusion Energy ("Fusion for Energy")
#
# Licensed under the EUPL, Version 1.1 or - as soon they 
# will be approved by the European Commission - subsequent  
# versions of the EUPL (the "Licence"); 
# You may not use this work except in compliance with the 
# Licence. 
# You may obtain a copy of the Licence at: 
#  
# http://ec.europa.eu/idabc/eupl
#
# Unless required by applicable law or agreed to in 
# writing, software distributed under the Licence is 
# distributed on an "AS IS" basis, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
# express or implied. 
# See the Licence for the specific language governing 
# permissions and limitations under the Licence. 
#
# $Id: Makefile.gcc 3 2015-01-15 16:26:07Z aneto $
#
#############################################################

TARGET=rpmbuild
TOP_DIR=../..

MARTe2_MAKEDEFAULT_DIR?=$(MARTe2_DIR)/MakeDefaults

M2_RPM_TOPDIR_DIRECTIVE=$(PWD)/$(TOP_DIR)/Build/rpmbuild
M2_RPM_BUILD_DIR=$(M2_RPM_TOPDIR_DIRECTIVE)/BUILD
M2_RPM_ID=marte2-components-ccs
M2_RPM_TOP_DIR=/opt/marte2-components

define build-component
	make -C $(TOP_DIR) -f Makefile.$(TARGET) \
		M2_RPM_ID=$(M2_RPM_ID)-$(1) \
		M2_RPM_NAME=MARTe2_Components_$(1) \
		FOLDERSX='$(2) Makefile.x86-linux.x Makefile.inc.x' \
		M2_RPM_BUILD_EXTRA_ARGS='SPBM=\"$(2)\" SPBMT=""' M2_RPM_LIB_LIST='$(3)' \
		M2_RPM_REQUIRES='marte2-core $(4)' \
		M2_RPM_TOPDIR_DIRECTIVE=$(M2_RPM_TOPDIR_DIRECTIVE) \
		M2_RPM_TOP_DIR=$(M2_RPM_TOP_DIR) \
		M2_RPM_BUILD_DIR=$(M2_RPM_BUILD_DIR) \
		M2_RPM_DEVEL_LIST="" 
endef

define build-component-test
	make -C $(TOP_DIR) -f Makefile.$(TARGET) SKIP_PROFINET=1 \
		M2_RPM_ID=$(M2_RPM_ID)-$(1)-test \
		M2_RPM_NAME=MARTe2_Components_$(1) \
		M2_RPM_BUILD_EXTRA_ARGS='SPBM=\"$(2)\" SPBMT=\"$(3) $(4) Test/GTest.x\"' \
		FOLDERSX='$(3) $(4) Makefile.x86-linux.x Makefile.inc.x Source/Components/DataSources/LinuxTimer.x Test/Components/DataSources/LinuxTimer.x Test/GTest.x' \
		M2_RPM_BIN_LIST='MainGTest-ccs-$(1).ex $(5)' \
		M2_RPM_REQUIRES='$(M2_RPM_ID)-$(1)' \
		M2_RPM_BUILD_OPTIONS='all RENAME_GTEST_EX=MainGTest-ccs-$(1).ex' \
		M2_RPM_TOP_DIR=$(M2_RPM_TOP_DIR)-test \
		M2_RPM_TOPDIR_DIRECTIVE=$(M2_RPM_TOPDIR_DIRECTIVE) \
		M2_RPM_BUILD_DIR=$(M2_RPM_BUILD_DIR) \
		M2_RPM_SRC_DIR="Test" \
		M2_RPM_LIB_LIST="*Test.a" \
		M2_RPM_PROFILE_D="" \
		M2_RPM_LIB_DIR="" 
endef

all: epics-ca \
	epics \
	sdn \
	dan \
	rio \
	pxi \
	tcn \
	ccsh \
	ccs-comps

test: all\
	epics-ca-test \
	epics-test \
	sdn-test \
	dan-test \
	rio-test \
	pxi-test \
	tcn-test \
	ccsh-test \
	ccs-comps-test



CCSGT61 = $(shell if [ `codac-version -v | sed 's/\(.*\)\.\(.*\)/\1\2/g'` -ge 61 ]; then echo 1; else echo 0; fi)
#EPICS v3 only for older versions of CCS - it is incompatible with epics v7 RPM (below)
epics-ca:
ifeq "$(CCSGT61)" "0"
	$(call build-component,epics-ca,Source/Components/DataSources/EPICSCA.x Source/Components/Interfaces/EPICS.x,EPICS.a EPICSCA.a libEPICSCA.so EPICSCA.so libEPICS.so EPICS.so,codac-core-$(shell codac-version -v)-epics)
endif

#EPICS v7 for newer versions of CCS is it incompatible with epics-ca (above)
epics:
ifeq "$(CCSGT61)" "1"
	$(call build-component,epics,Source/Components/DataSources/EPICSCA.x Source/Components/Interfaces/EPICS.x Source/Components/DataSources/EPICSPVA.x Source/Components/Interfaces/EPICSPVA.x,EPICS.a EPICSCA.a libEPICSCA.so EPICSCA.so libEPICS.so EPICS.so EPICSPVADataSource.a EPICSPVA.a libEPICSPVADataSource.so EPICSPVADataSource.so libEPICSPVA.so EPICSPVA.so,codac-core-$(shell codac-version -v)-epics)
endif

sdn:
	$(call build-component,sdn,Source/Components/DataSources/SDN.x,SDN.a libSDN.so SDN.so,codac-core-$(shell codac-version -v)-sdn-core)

dan:
	$(call build-component,dan,Source/Components/DataSources/DAN.x,DAN.a libDAN.so DAN.so,codac-core-$(shell codac-version -v)-dan-daq)

rio:
	$(call build-component,rio,Source/Components/DataSources/NI9157.x Source/Components/Interfaces/NI9157Device.x,NI9157.a libNI9157.so NI9157.so NI9157Device.a libNI9157Device.so NI9157Device.so,codac-core-$(shell codac-version -v)-kmod-nirio-lib)

pxi:
	$(call build-component,pxi,Source/Components/DataSources/NI1588.x Source/Components/DataSources/NI6259.x Source/Components/DataSources/NI6368.x,NI1588.a libNI1588.so NI1588.so NI6259.a libNI6259.so NI6259.so NI6368.a libNI6368.so NI6368.so,codac-core-$(shell codac-version -v)-kmod-nisync-lib codac-core-$(shell codac-version -v)-kmod-pxi6259-lib codac-core-$(shell codac-version -v)-kmod-pxie6368-lib)

tcn:
	$(call build-component,tcn,Source/Components/DataSources/LinuxTimer.x Source/Components/Interfaces/TcnTimeProvider.x,TcnTimeProvider.a libTcnTimeProvider.so TcnTimeProvider.so,codac-core-$(shell codac-version -v)-tcn-lib)

CCSGT63=$(shell if [ `codac-version -v | sed 's/\(.*\)\.\(.*\)/\1\2/g'` -ge 63 ]; then echo 1; else echo 0; fi)
ccsh:
## Only force CCSHelpers if CCS version is gt v7.0
ifeq "$(CCSGT63)" "1"
	$(call build-component,helpers,Source/Components/Interfaces/CCSHelpers.x,CCSHelpers.a libCCSHelpers.so CCSHelpers.so,codac-core-$(shell codac-version -v)-cpp-common)
endif

epics-ca-test:
ifeq "$(CCSGT61)" "0"
	$(call build-component-test,epics-ca,,Source/Components/DataSources/EPICSCA.x Source/Components/Interfaces/EPICS.x,Test/Components/DataSources/EPICSCA.x Test/Components/Interfaces/EPICS.x,MARTeEPICSCAInputOutputTest.db MARTeEPICSCATest.db)
endif

epics-test:
ifeq "$(CCSGT61)" "1"
	$(call build-component-test,epics,,Source/Components/DataSources/EPICSCA.x Source/Components/Interfaces/EPICS.x Source/Components/DataSources/EPICSPVA.x Source/Components/Interfaces/EPICSPVA.x,Test/Components/DataSources/EPICSCA.x Test/Components/Interfaces/EPICS.x Test/Components/DataSources/EPICSPVA.x Test/Components/Interfaces/EPICSPVA.x,MARTeEPICSCAInputOutputTest.db MARTeEPICSCATest.db EPICSPVA2V3ServiceTest.db)
endif

sdn-test:
	$(call build-component-test,sdn,,Source/Components/DataSources/SDN.x,Test/Components/DataSources/SDN.x,)

dan-test:
	$(call build-component-test,dan,,Source/Components/DataSources/DAN.x,Test/Components/DataSources/DAN.x,dan_test_config.xml dan_test_config_ccs_6.xml)

rio-test:
	$(call build-component-test,rio,,Source/Components/GAMs/IOGAM.x Source/Components/GAMs/Interleaved2FlatGAM.x Source/Components/DataSources/NI9157.x Source/Components/Interfaces/NI9157Device.x,Test/Components/DataSources/NI9157.x Test/Components/Interfaces/NI9157Device.x,)

pxi-test:
	$(call build-component-test,pxi,,Source/Components/GAMs/IOGAM.x Source/Components/DataSources/NI1588.x Source/Components/DataSources/NI6259.x Source/Components/DataSources/NI6368.x,Test/Components/DataSources/NI1588.x Test/Components/DataSources/NI6259.x Test/Components/DataSources/NI6368.x,)

tcn-test:
	$(call build-component-test,tcn,Source/Components/DataSources/LinuxTimer.x Test/Components/DataSources/LinuxTimer.x,Source/Components/Interfaces/TcnTimeProvider.x,Test/Components/Interfaces/TcnTimeProvider.x,)

ccsh-test:
## Only force CCSHelpers if CCS version is gt v7.0
ifeq "$(CCSGT63)" "1"
	$(call build-component-test,helpers,,Source/Components/Interfaces/CCSHelpers.x,Test/Components/Interfaces/CCSHelpers.x,)
endif

CCS_COMPS_DEPS=$(M2_RPM_ID)-sdn $(M2_RPM_ID)-dan $(M2_RPM_ID)-rio $(M2_RPM_ID)-pxi $(M2_RPM_ID)-tcn
CCS_TEST_COMPS_DEPS=$(M2_RPM_ID)-sdn-test $(M2_RPM_ID)-dan-test $(M2_RPM_ID)-rio-test $(M2_RPM_ID)-pxi-test $(M2_RPM_ID)-tcn-test

ifeq "$(CCSGT61)" "1"
CCS_COMPS_DEPS := $(CCS_COMPS_DEPS) $(M2_RPM_ID)-epics
CCS_TEST_COMPS_DEPS_F := $(CCS_TEST_COMPS_DEPS) $(M2_RPM_ID)-epics-test
else
CCS_COMPS_DEPS := $(CCS_COMPS_DEPS) $(M2_RPM_ID)-epics-ca
CCS_TEST_COMPS_DEPS_F := $(CCS_TEST_COMPS_DEPS) $(M2_RPM_ID)-epics-ca-test
endif

ifeq "$(CCSGT63)" "1"
CCS_COMPS_DEPS := $(CCS_COMPS_DEPS) $(M2_RPM_ID)-helpers
CCS_TEST_COMPS_DEPS := $(CCS_TEST_COMPS_DEPS) $(M2_RPM_ID)-helpers-test
endif


ccs-comps:
	make -C $(TOP_DIR) -f Makefile.$(TARGET) SKIP_PROFINET=1 \
		M2_RPM_ID=$(M2_RPM_ID)-comps \
		M2_RPM_NAME=MARTe2_Components-ccs \
		M2_RPM_BUILD_EXTRA_ARGS='SPBM=\"\" SPBMT=\"\"' \
		FOLDERSX='Makefile.inc.x Makefile.x86-linux.x Source.x' \
		M2_RPM_REQUIRES='$(CCS_COMPS_DEPS)' \
		M2_RPM_TOP_DIR=$(M2_RPM_TOP_DIR) \
		M2_RPM_TOPDIR_DIRECTIVE=$(M2_RPM_TOPDIR_DIRECTIVE) \
		M2_RPM_BUILD_DIR=$(M2_RPM_BUILD_DIR) \
		M2_RPM_SRC_DIR="Source" \
		M2_RPM_DEVEL_ID="" \
		M2_RPM_PROFILE_D="" \
		M2_RPM_WITH_FILES="" \
		M2_RPM_LIB_DIR="" 

ccs-comps-test:
	make -C $(TOP_DIR) -f Makefile.$(TARGET) SKIP_PROFINET=1 \
		M2_RPM_ID=$(M2_RPM_ID)-ccs-comps-test \
		M2_RPM_NAME=MARTe2_Components-ccs-test \
		M2_RPM_BUILD_EXTRA_ARGS='SPBM=\"\" SPBMT=\"\"' \
		FOLDERSX='Makefile.inc.x Makefile.x86-linux.x Source.x' \
		M2_RPM_REQUIRES='$(CCS_TEST_COMPS_DEPS)' \
		M2_RPM_TOP_DIR=$(M2_RPM_TOP_DIR) \
		M2_RPM_TOPDIR_DIRECTIVE=$(M2_RPM_TOPDIR_DIRECTIVE) \
		M2_RPM_BUILD_DIR=$(M2_RPM_BUILD_DIR) \
		M2_RPM_SRC_DIR="Source" \
		M2_RPM_DEVEL_ID="" \
		M2_RPM_PROFILE_D="" \
		M2_RPM_WITH_FILES="" \
		M2_RPM_LIB_DIR="" 

check-env:
ifndef MARTe2_DIR
    $(error MARTe2_DIR is undefined)
endif

include $(MARTe2_MAKEDEFAULT_DIR)/MakeStdLibRules.$(TARGET)

